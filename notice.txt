2018.02.23

인터페이스에 퍼블릭을 왜 붙이는가?? ㅇ
insert시 반환값(void냐 아니냐) ㅇ
date 쓰지 말것(자바8에서 지원하는 로컬date타입) ㅇ
롬복을 많이 활용할것(@DATA보단 쓸 언토네이션만 쓸것) ㅇ
테스트시 실패케이스도 만들자
파라미터많을때 넣을때 빌더쓰면 좋음 ㅇ

jpa구현체가 무엇인가??? -> 사실 하이버네이트임 : 엔티티매니저 ㅇ
테스트컴파일과 컴파일 ㅇ
스트링부트라이브러리 쓰지말고 딴거 정확하게 쓸거 쓰자 ㅇ
어플라이컨텍스를 분리하자(웹앰프이씨나 도메인별로....) micro service architecture(msa) ㅇ
->이니셜라이즈 신경쓰기
에 대해서 알아볼까

@컬럼 안쓸때는 쓰지말자 ㅇ
인트보단 인테저로 인트보단 롱으로 ㅇ
아이디보단 따로 숫자키를 둬서 ㅇ
생서자보단 @AllArgsconstructor(롬복임) ㅇ
제이피에이레파지토리로만 충분히 할 수 있음... 커스텀레파지토리는 좀복잡할뗴(레퍼런스 참조) ㅇ
엔티티???? 엔티티매니저와의 관계(커스텀할떄는 앤티티매니저가 있어야됨)
인테그레이션 테스트와 유닛테스트에 대해???

외부리소스일떄는 어플리케이션컨택스트에 직접 빈
아닐떄는 어노테이션을 사용하자
익셉션을 구체적으로 사용

VO와 DTO의 차이??(외부리소스와 통신: DTO, 내부간: VO)

//이번주 과제
오늘 적용한거 적용해보기(형원님 코드 푸시한거 보고 하지 말기)
형원님 코드는 일요일날 푸시할것(최대한 보지말고 해보기)
돌아가는 소스 완성하기
깃사용법 숙지
s
//다음주에 할거
BOARD테이블 등 어떻게 짤 지 상의
DB맞추기(DB종류, 아이디, 비번) 등 상의

==========================================================================================
2018.03.10
일반적인 구조

모놀로틱: 하나의 큰 프로젝트에 모든 기능을 구현한다.

MSA: 특정 기능별로 프로젝트를 구현하다.

기능(bounded context)이란???

bounded context

도메인: 기능별로 쪼갤수 있는 단위(회원, 게시판)-> 회원내에서도 시큐리티, 관리


클라이언트 <- 스프링데이터 제이페이(추상화) <- 하이버네이트(구현) <- 마이에스큐엘, 오라클(제품)



*일단 일차적으로 board만생각하자
board



한사람이 브랜치 만들어서 푸시
다른사람이 풀
자기 로컬로 체크아웃받은다음에

작업한거 

==========================================================================================
2018.03.17

*스터디 지적사항
- 가비지를 계속 지워주자.(log나 Hello 등) v
- Service 인터페이스를 좀 더 디테일하게 만들자.
(그래야 트랜잭션 처리나 기술적 분리가 편리해짐)
(ModifyBoard나 UpdateBoard 등으로...)
- UTF-8와 같은 자주 쓰이는 문자열이나 숫자는 상수를 사용하자. v
- 게시판 플로우를 이해해야 한다.
- form에 url 붙이자. v
- ModelAndView를 써서 View를 명시적으로 하자. v
(Model을 쓸 경우 메소드이름만 바껴도 View가 바뀜)
- new ArrayList<>(); 보단 static 메소드 사용하자. v
- contoller에서 바로 entity를 쓰기 보단 DTO를 따로 정의하여 사용하자
(entity는 domain(기능) 레벨의 영역)
(클라이언트와 서버간의 디펜던시를 끊는게 좋음)

* 배운 키워드
- REST URL
- ENTITY와 DTO
- Domain에 따른 패키지 나누기


* 프로젝트에 관한 사항
- 패키지 구조는 새로 정리했습니다.
(feature/crud_2 로 땄으니깐 새로 풀 받아서 거기서 작업해주세요)
(작업하시기 전에 풀 먼저하신 후에 작업해주세요)
(푸쉬할떄마다 슬랙에 공유부탁드립니다. 테스트 소스더라도)
- 게시판 플로우는 다음과 같습니다.
	1. 게시글 리스트
	    -> 글제목 클릭시 상세이동
	    -> 글쓰기 버튼 (클릭시 쓰기 페이지 이동)
	2. 게시글 쓰기
	    -> 취소 ( 리스트 이동 )
	    -> 등록 ( 상세이동 )
	3. 게시글 읽기
	    -> 수정 (수정페이지로 이동)
	    -> 삭제 (삭제 후 리스트 이동)
	    -> 목록 ( 리스트 이동 )
	4. 게시글 수정
	    -> 수정 후 상세 이동
	    -> 취소클릭 상세 이동
	5. 게시글 삭제
	    -> 삭제 후 리스트로 이동

	<기능단위>
	(/board             		리스트)
	 /board/boardList   		리스트         	- 윤미
	 /board/boardUpdate 		쓰기,수정     	- 준웅
	 /board/boardDetail 		상세            - 세준
	(/board/boardDetail/{id})
	 /board/boardDelete 		삭제            - 대환

	<화면>
	boardList.hbs         		리스트         	- 윤미
	boardDetail.hbs     		상세            - 세준
	boardUpdate.hbs     		수정,쓰기    	- 준웅

* 패키지 구조에 대해



REST url
외부에 있는 자원을 가지고 오기 위한 규약

	기존: smartboard/boarddetail?id=1
	resturl: smartboard/1 가져올떄 get, 없앨떄 delete 등
			smartboard/1/comments/2


빌드하면서 체크해주는 게 뭐였더라??? 

entity: domain 레벨의 data레벨임 클라이언트와 서버간의 디펜던시를 끊는게 좋음
	contoller에서 해주자(읽을떄나 쓸떄나)
	List<BoardDtoList> bardDtoLIst = boardList.stream()
		.map(board -> convert(board)).collect(Collectors.toList());
	DTO는 인터페이스 패키지를 만들어서 만들자!


게시판 플로우
1. 게시판 이름 클릭
2. 게시글리스트
3. 게시글 쓰기
	-> 리스트로 가거나, 읽기로 가야한다.
3. 게시글 읽기
	-> 리스트로 가거나, 삭제할 수 있어야 한다.
4. 게시글 삭제
	-> 리스트로 갈 수 있어야 한다.
5. 게시글 수정
	-> 리스트로 가거나, 읽기로 가야한다.


Board와 Comment 같은 엔티티를 둘다 건드릴 경우 service에서 해주는 게 맞고
단독일 경우에는 엔티티계층에서 하는게 맞음

==========================================================================================
2018.03.24 정리
ㅇ 공부해야할 것
	- 테스트더블(목과 스텁...)
	- 오토박싱과 언박싱
	- 퀄리파이어 어노테이션
	- 스프링 공동 익셥센 핸들러
	- 공유한 책으로 자바8 공부

ㅇ 개선사항
	- 포매팅
	- 불필요한 주석빼자 쓸거면 정확하게 v
	- 런타임은 throws 안써야 됨
	- getBoard() 서비스 익셈션 처리 잘못됨. 옵셔널 처리
	- 피리미티브와 래퍼를 신경쓰자(보드는 래퍼되어있음) v
	- autowired된거 접근제어자 꼭 쓰자 v
	- camel케이스 같은거 확인 v
	- Entity나 DTO Setter는 지양하자(그리고 constructor하고 세터는 필요없을거임) v
	- 약어쓰지말자(bid->boardId 등) v
	- 리퀘스트 메소드 종류에 대해서 알자(PUT은 전체수정 PATCH 특정키값만 수정 등)
	- viewCount는 분리해야하지 않을까? 없애거나... ( 뷰카운트는 어차피 부가기능 ) v
	- RESTful쓸거면 사실 @RequestBody, @RestController써서 JSON 사용하면 됨

ㅇ 다음주까지
	- 다음주에 리팩토링 코드리뷰하고 시연할거임
	- 각자 crud_3를 기반으로 브랜치따자(crud_3_junwoong 이런식으로)
	- 각자 브랜치에서 리팩토링을 각자 알아서 작업
	- 목요일 즈음해서 각자 브랜치 푸쉬하면 그거 머지해서 crud로 합칠거임
	- 리팩토링 과제
		0. 개선사항 수정 v
		1. 중복코드 삭제와 static method 작성 v
			dto->entity, entity->dto (util) v
			dateFormat관련 (util) v
		2. RESTful에 v
			- boards(GET) (리스트)
			- boardsForm(GET) (작성양식)
			- boards(POST) (게시글 작성)
			- boards/{id}(GET) (게시글 보기)
			- boards/{id}(PATCH) (게시글 수정)
			- boards/{id}(DELETE) (게시글 삭제)
		3. Form으로 다양한 메소드들을 사용할 수 있는 필터(hiddenHttpMethodFilter??) 적용
		4. 관심사분리
			서비스 나누기 v
			서비스와 엔티티 메서드 정리
		5. 뷰정리
		6. 각자 하고싶은거 

ㅇ 화이팅!
